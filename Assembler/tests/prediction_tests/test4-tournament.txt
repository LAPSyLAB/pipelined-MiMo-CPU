@testing tournament predictor
@correlating predictor is not always better than a standard 2-bit predictor
@Sometimes, unrelated jumps may affect the correlating predictor and make predictions worse.
@To account for that, we use a tournament predictor,
@ that dinamically chooses whether to to predict using local history(as a correlating predictor) or global history(2-bit predictor)
@ we'll take the same code as with our correlating predictor, but expand it with an extra jump

/*
while (true){
	if(a % 2 == 0){jump1}	TNTNTNTNTNT
	a++		
	if(b == 1){jump2}	NNNNNNNNNNN

	if(c % 2 == 0){jump3}	TNTNTNTNTNT
	c++
}
a => r0, b => r1, c => r2, r5=>stalling command, r3,r4,r6 => counting loops for a,b and c
*/

.text

loop: 
rem r0, r0, #2
cmp r0, #0
jeq jump1	@2nd instruction

afterjump1:
add r0, r0, #1
add r5, r5, #1
add r5, r5, #1
add r5, r5, #1
add r5, r5, #1
add r5, r5, #1
add r5, r5, #1
cmp r1, #1
jeq jump2	@10th instruction, last 3 bits are 010 so it'll have the same LPT spot as the 2nd instruction
add r4, r4, #1
rem r2, r2, #2
cmp r2, #0
jeq jump3	@another jump, independent to the last 2
afterjump3:
add r2, r2, #1
j loop

jump1:
add r3, r3, #1
j afterjump1

jump2:
mov r7, #15

jump3:
add r6, r6, #1
j afterjump3


/*
Branch outcomes:
jump1		TNTNTNTNTNTNTNTN
jump2 		NNNNNNNNNNNNNNNN
jump3		TNTNTNTNTNTNTNTN

Correlating predictor predictions:
jump1		NNNNNNTNTNTN
jump2 		NNNNNTNTNTNT
jump3		NNNNTNTNTNTN

Because of the extra independent jump, 
our local history table is being modified and we are incorrectly predicting every 2nd jump2 using the correlating predictor.

Tournament predictions:
jump1		NNNNNNTNTNTN
jump2 		NNNNNNNNNNNN
jump3		NNNNTNTNTNTN

After the 5th iteration of jump2, the tournamnet predictor is always correct
*/