@testing predictions and overriding

.text

@testing jump when should jump
/*
mov r1, #5		@cycle 5
mov r2, #6		@cycle 6
loop: add r3, r3, #1	@cycle 7, 10, 13, 16... we lose 0 cycles for every jump when prediction is correct
cmp r1, r2		@cycle 8
jmi loop		@cycle 9
*/

@testing jump when should not jump
/*
mov r1, #5		@cycle 5
mov r2, #6		@cycle 6
loop: add r3, r3, #1	@cycle 7, 11, 15, 19... we lose 1 cycle for every jump when prediction is incorrect
cmp r1, r2		@cycle 8
jpl loop		@cycle 9
*/

@JUMPS WORK

@testing branch when should jump
/*mov r1, #5		@cycle 5
mov r2, #6		@cycle 6
loop: add r3, r3, #1	@cycle 7
cmp r1, r2		@cycle 8
bmi #4			@cycle 9
*/

@testing branch when should not jump
/*mov r1, #5		@cycle 5
mov r2, #6		@cycle 6
loop: add r3, r3, #1	@cycle 7
cmp r1, r2		@cycle 8
bpl #4			@cycle 9
*/

@BRANCHING WORKS

@testing branch to subroutine when should jump

mov r1, #5		@cycle 5
mov r2, #6		@cycle 6
add r3, r3, #1		@cycle 7
cmp r1, r2		@cycle 8
blmi subroutine		@cycle 9

add r0, r0, #1		@cycle 12
add r0, r0, #1		@cycle 13
add r0, r0, #1		@cycle 14
add r0, r0, #1		@cycle 15

subroutine:
mov r7, #77		@cycle 10
rts			@cycle 11


@testing branch to subroutine when should not jump
/*mov r1, #5		@cycle 5
mov r2, #6		@cycle 6
add r3, r3, #1		@cycle 7
cmp r1, r2		@cycle 8
blpl subroutine		@cycle 9

add r0, r0, #1		@cycle 12
add r0, r0, #1		@cycle 13
add r0, r0, #1		@cycle 14
add r0, r0, #1		@cycle 15

subroutine:
mov r7, #77		@cycle 10
rts			@cycle 11
*/

@BRANCHING TO SUBROUTINE WORKS