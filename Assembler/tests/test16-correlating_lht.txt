@testing correlating predictor
@sometimes 2 branches can take up the same spot in our local prediction table
@because we use a 3 bit addressed LPT, this happens if 2 instructions seperated by 8 addresses are both branches
/*
while (true){
	if(a % 2 == 0){jump1}	TNTNTNTNTNT
	a++		
	if(b == 1){jump2}	NNNNNNNNNNN
}
a => r0, b => r1, r5=>stalling command, r3,r4 => counting loops for a and b
*/

.text

loop: 
rem r0, r0, #2
cmp r0, #0
jeq jump1	@2nd instruction

afterjump1:
add r0, r0, #1
add r5, r5, #1
add r5, r5, #1
add r5, r5, #1
add r5, r5, #1
add r5, r5, #1
cmp r1, #1
jeq jump2	@10th instruction, last 3 bits are 010 so it'll have the same LPT spot as the 2nd instruction
add r4, r4, #1
j loop

jump1:
add r3, r3, #1
j afterjump1

jump2:
mov r6, #15


/*
Branch outcomes				Branch predictions when using only 2 bit table: (lpt: 00 -> 01 -> 00 -> 00 -> 00...
jump1		TNTNTNTNTNTNTNTN	jump1	NNNNNN
jump2 		NNNNNNNNNNNNNNNN	jump2	NNNNNN

Becuase they take up the same spot in our LPT, we misspredict jump1 every second loop
Table states when using correlating predictor:
LHT: 000 -> 100 -> 010 -> 001 ->	000 -> 		100
LPT: 00 -> 01(00) -> 01(00)(00) -> 01(00)(00)(00) -> 10(00)(00)(00)

Branch predictions when using correlating predictor:
jump1: NNNNTNTNTNTN	
jump2: NNNNNNNNNNNN

 The predictions are on average more correct using a correlating predictor when 2 jumps take up the same LPT address.
 After the 4th iteration in our example above, we predict correct jumps everytime for each of our jump instructions.
*/